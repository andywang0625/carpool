package com.web.carpool.controller;

import java.util.List;

import com.web.carpool.exception.UserNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.web.carpool.model.User;
import com.web.carpool.service.UserService;
import org.springframework.web.server.ResponseStatusException;

import javax.servlet.http.HttpServletResponse;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/users") // This means URL's start with /users (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	@Qualifier("userService")
	private UserService userService;

	@GetMapping(path = "/id={id}")
	@ResponseBody
	public User getUserById(@PathVariable(value = "id") int userId, HttpServletResponse res) {
		// This returns a JSON or XML with the users
		User user = userService.findUserById(userId);
		if (user == null) {
			res.setStatus(HttpServletResponse.SC_NOT_FOUND);
//			throw new UserNotFoundException();
		}
		return user;
	}
	
	@GetMapping(path = "/username={username}")
	@ResponseBody
	public User getUserByUsername(@PathVariable(value = "username") String username, HttpServletResponse res) {
		User user = userService.findUserByUsername(username);
		if (user == null) {
			res.setStatus(HttpServletResponse.SC_NOT_FOUND);
		}
		return user;
	}
	
	@GetMapping(path = "/email={email}")
	@ResponseBody
	public User getUserByEmail(@PathVariable(value = "email") String email, HttpServletResponse res) {
		User user = userService.findUserByEmail(email);
		if (user == null) {
			res.setStatus(HttpServletResponse.SC_NOT_FOUND);
		}
		return user;
	}
	
	@GetMapping(path = "/all")
	public @ResponseBody List<User> getAllUsers() {
		return userService.findAll();
	}

	@PostMapping(path = "")
	public @ResponseBody User createUser(@RequestBody User user) {
		return userService.createUser(user);
	}
}
